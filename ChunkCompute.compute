// Each #kernel tells which function to compile; you can have many kernels
//#pragma kernel PopulateVoxelMap
#pragma kernel AddVoxelDataToChunk


#define SIZEOF_FLOAT	4
#define SIZEOF_FLOAT3	12
#define SIZEOF_UINT		4

#include "LookupTables.cginc"

//RWStructuredBuffer<bool> _voxelMap;
RWByteAddressBuffer _vertexBuffer;
RWByteAddressBuffer _normalBuffer;
RWByteAddressBuffer _texcoordBuffer;
RWByteAddressBuffer _indexBuffer;
//RWStructuredBuffer<uint> _indexCounter;
//RWStructuredBuffer<uint> _vertexCounter;
//RWStructuredBuffer<uint> _count;

RWStructuredBuffer<float> _vertexDebugBuffer;
RWStructuredBuffer<uint> _indexDebugBuffer;
RWStructuredBuffer<uint> _idDebugBuffer;


static uint _dimmX = 8;
static uint _dimmY = 8;
static uint _dimmZ = 8;
static uint3 _dimms = uint3(_dimmX, _dimmY, _dimmZ);

uint FlatIndex(uint x, uint y, uint z, uint dimmX, uint dimmY, uint dimmZ)
{
    return x + (y * dimmX) + (z * dimmX * dimmY);
}

uint FlatIndex(uint3 index, uint3 dimm)
{
    return index.x + (index.y * dimm.x) + (index.z * dimm.x * dimm.y);
}

uint VertexAdress(uint vert, uint wall)
{
    return (wall * 48) + (vert * 12);
}

/*
[numthreads(8,8,8)]
void PopulateVoxelMap (uint3 id : SV_DispatchThreadID)
{
    // Boundary check
    if (any(id + 1 >= _dimms.xyz))
        return;
    
    _voxelMap[FlatIndex(id.x, id.y, id.z)] = true;
}
*/

[numthreads(8, 8, 8)]
void AddVoxelDataToChunk(uint3 id : SV_DispatchThreadID)
{    
    uint flatId = FlatIndex(id, _dimms);
    // Boundary check
    if (flatId >= _dimms.x*_dimms.y*_dimms.z)
        return;
    
    //if (any(id + 1 >= _dimms.xyz))
    //    return;
    
    uint Vaddr = 0;
    uint Iaddr = 0;
    uint index = 0;
    int vBaseAdress = flatId * 288;
    int iBaseAdress = flatId * 144; //36
    uint indexBase = flatId * 24;
    
    for (int p = 0; p < 6; p++)
    {
        Vaddr = vBaseAdress + (p * 48);
        Iaddr = iBaseAdress + (p * 24);
        index = indexBase + (p * 4);
        
        float3 vertex0 = id+ voxelVerts[voxelTris[p][0]];
        float3 vertex1 = id + voxelVerts[voxelTris[p][1]];
        float3 vertex2 = id + voxelVerts[voxelTris[p][2]];
        float3 vertex3 = id + voxelVerts[voxelTris[p][3]];
        
        uint addr0 = index;
        uint addr1 = index + 1;
        uint addr2 = index + 2;
        uint addr3 = index + 3;
        
        _vertexBuffer.Store3(Vaddr, asuint(vertex0));
        _vertexBuffer.Store3(Vaddr + 12, asuint(vertex1));
        _vertexBuffer.Store3(Vaddr + 24, asuint(vertex2));
        _vertexBuffer.Store3(Vaddr + 36, asuint(vertex3));
        
        _texcoordBuffer.Store2(Vaddr, asuint(voxelUvs[0]));
        _texcoordBuffer.Store2(Vaddr + 8, asuint(voxelUvs[1]));
        _texcoordBuffer.Store2(Vaddr + 16, asuint(voxelUvs[2]));
        _texcoordBuffer.Store2(Vaddr + 24, asuint(voxelUvs[3]));
        
        // Indexes
        _indexBuffer.Store3(Iaddr, uint3(addr0, addr1, addr2));
        _indexBuffer.Store3(Iaddr + 12, uint3(addr2, addr1, addr3));
        
        _idDebugBuffer[flatId] = flatId;
    }
    
    /*
    for (int p = 0; p < 6; p++)
    {
        if (!CheckVoxel(pos + faceChecks[p]))
        {	
            
            vertices.Add(pos + VoxelData.voxelVerts[VoxelData.voxelTris[p, 0]]);
            vertices.Add(pos + VoxelData.voxelVerts[VoxelData.voxelTris[p, 1]]);
            vertices.Add(pos + VoxelData.voxelVerts[VoxelData.voxelTris[p, 2]]);
            vertices.Add(pos + VoxelData.voxelVerts[VoxelData.voxelTris[p, 3]]);
            uvs.Add(VoxelData.voxelUvs[0]);
            uvs.Add(VoxelData.voxelUvs[1]);
            uvs.Add(VoxelData.voxelUvs[2]);
            uvs.Add(VoxelData.voxelUvs[3]);
            triangles.Add(vertexIndex);
            triangles.Add(vertexIndex + 1);
            triangles.Add(vertexIndex + 2);
            triangles.Add(vertexIndex + 2);
            triangles.Add(vertexIndex + 1);
            triangles.Add(vertexIndex + 3);
            vertexIndex += 4;
            
        }
    }*/
}

/*
bool CheckVoxel(float3 pos)
{
    int x = floor(pos.x);
    int y = floor(pos.y);
    int z = floor(pos.z);

    if (x < 0 || x > chunkSize - 1 || 
        y < 0 || y > chunkSize - 1 || 
        z < 0 || z > chunkSize - 1)
        return false;

    //return voxelMap[x, y, z];
}
*/



